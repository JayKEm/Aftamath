Script Commands and Syntax

attack:
	~ not implemented
	attack(object)
action:
	makes object do an action animation of their class; type of action depends on object
	action(object#, action#)

	action # usually goes from 1 - 9
		1 - walk
		2 - jump
XXXXXXXXXXXXXXXX3 - fall (doesn't actually make the object fall)
		4 - flinch
		5 - die
		6 - power
		7 - attack
		8 - special1	\  depends on object type
		9 - special2    /
	~to be implemented: more action animations
choice:
	provides handling for the indicated choice
	must be ended with "end" command
	choice(choice#[1-5])

	i.e. if player chooses choice 1, the logic for "choice 1" is handled
done:
	ends handling for the entire script
	resets the state of all NPCs
	lowers the dialog box
	focuses camera on player
	done()
endChoice:
	~ ends recent choice handling
	endChoice()
endIf:
	ends condition handling
	endIf()
if:
	compares values and flags
	if("flag", flag#, boolean)
	if(object#, object property, condition, value)
	if(property, condition, value)

	object properties: location, health
	properties: playerHealth, playerMoney, playerBravery, playerNicety, relationship/love,
	  houseType, partnerID

	~capitalization does not matter
facePlayer:
	makes a mob face the player; does not affect non-mob objects
	NPCs will have their state set to FACEPLAYER
	facePlayer(object#)
face/faceObject:
	makes a mob face a specific object; does not affect non-mob objects
	NPCs will have their state set to FACEOBJECT
	face(object, focus object#)
forcefollow:
	changes whether or not the player's partner is forced to follow the player
	if the player doesn't have a partner, this does nothing
	forcefollow(true/false)
resetState:
	sets the NPC's state to its default state; does not affect non-NPC objects
	resetState(object#)
lockPlayer:
	prevents the player from being able to move by setting the PlayState type to LISTEN
	lockPlayer()
lock:
	locks the mob
	lock(object#)
lowerDialog:
	lowers the dialog box from visibility
	lowerDialog()
moveCamera:
	moves the camera to the indicated location
	moveCamera(x, y)
focus/focusCamera:
	focuses the camera on the specified object
	focus(object#)
unfocus/unfocusCamera/removeFocus:
	focuses the camera back on the player
	unfocus()
moveObject:
	moves the object to the specified location; units in pixels
	moveObject(object#, x)
movePlayer:
	offsets the player by specified amount; units in pixels
	movePlayer(offset)
pause:
	makes the dialog wait for user input
	pause()
setFlag:
	~ not fully theorized
	sets the flag to the indicated state
	setFlag(flag#, state)
setSpeaker:
	sets ther face on the dialog box to the indicated mob;
	~ non-Mob objects might not have a face
	if object isn't found, the face is not visible
	setSpeaker(object/object)

	known: partner, narrator, this
setScript:
	sets the read location for the object's script
	!!does not change the source file!!
	setScript(script#)
setChoice:
	creates a choice situation with the specified types of choices;
	minimum of 2 choices, maximum of 5 choices
	setChoice(type# 1, type# 2, ... type# 5)

	choice types: YesNo, 1(simple), 2(exciting), 3(curious), 4(cowardly), 5(power)
song/setSong:
	sets the current song to the song given;
	if no song gound with given parameters than song will not change
	setSong(song#/song title)

	Since songs indicicies might change througout development, it is better to use song titles
	see the music resource folder (/res/music/ for song names. Names must be EXACT
spawn:
	spawns the object at the specified location
	spawn(objectType, x, y)

	refer to object type list for possible values
text:
	gives text to the dialog box; consecutive text commands provide multiple pages of text
	if unpause is included, the dialogbox won't automatically wait for user input.
	~ if a pause is wanted, the script must outline when it is necessary to wait for user input with the pause command
	text([unpause], "text$)

	delimiters:
		/l - line
		~ /c - capitilize previous variable
		/player - player name
		/playerg - player gender
		/partner - partner name
		/partnerg - partner gender
		/home - player's house type
		~ /address - player's house address
value/changeValue:
	changes the identified value
	value(add/set, object#, value, new value)
	value(add/set, value, new Value)

	known: playerHealth, playerMoney, playerBravery, playerNicety, relationship/love, health
wait:
	pauses analyzing for game for specified time
	~ accuracy in time not implemented
	wait(time#)

====================================
arguments
====================================
	this: refers to the owner of the script


	