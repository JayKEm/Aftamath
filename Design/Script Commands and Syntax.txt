Script Commands and Syntax

================================================
*************	Important Info    **************
================================================

Every section of a script must be section off into "sub scripts", or scripts within scripts.
Example: Brackets are NOT included 
	Script [enter some kind of name here]
	[script code]
	done

Typically, dialoges with an NPC begin by locking the player, forcing the NPC to face the player,
and setting the current speaker to that NPC. This can all be done like so:
	lockPlayer
	faceObject(this, player)
	setSpeaker(this)

Use # at the beginning of a line to denote text that is not code


================================================
		Commands
================================================
attack:
	~ not implemented
	attack(objectName)
action:
	makes object do an action animation of their class; type of action depends on object
	action(objectName, action#)

	action # usually goes from 1 - 9
		1 - walk
		2 - jump
XXXXXXXXXXXXXXXX3 - fall (doesn't actually make the object fall)
		4 - flinch
		5 - die
		6 - power
		7 - attack
		8 - special1	\  depends on object type
		9 - special2    /
	~to be implemented: more action animations
choice:
	provides handling for the indicated choice
	must be ended with "end" command
	[choiceName]
done:
	ends handling for the entire script
	resets the state of all NPCs
	lowers the dialog box
	focuses camera on player
	done
endChoice:
	~ ends recent choice handling
	endChoice
endIf:
	ends condition handling
	endIf
if:
	compares values and flags
	if("flag", flag#, boolean)
	if(object#, object property, condition, value)
	if(property, condition, value)

	object properties: location, health
	properties: playerHealth, playerMoney, playerBravery, playerNicety, relationship/love,
	  houseType, partnerID

	~capitalization does not matter
face/faceObject:
	makes a mob face a specific object; does not affect non-mob objects
	NPCs will have their state set to FACEOBJECT
	face(objectName, focus objectName)
forcefollow:
	changes whether or not the player's partner is forced to follow the player
	if the player doesn't have a partner, this does nothing
	forcefollow(true/false)
follow:
	makes the mob object follow the target
	follow(objectName, focus objectName
resetState:
	sets the NPC's state to its default state; does not affect non-NPC objects
	resetState(objectName)
lockPlayer:
	prevents the player from being able to move by setting the PlayState type to LISTEN
	lockPlayer
lock:
	locks the mob
	lock(objectName)
lowerDialog:
	lowers the dialog box from visibility
	lowerDialog
moveCamera:
	moves the camera to the indicated location
	moveCamera(x, y)
focus/focusCamera:
	focuses the camera on the specified object
	focus(objectName)
unfocus/unfocusCamera/removeFocus:
	focuses the camera back on the player
	unfocus
moveObject:
	moves the object to the specified location; units in pixels
	moveObject(objectName, x)
movePlayer:
	offsets the player by specified amount; units in pixels
	movePlayer(offset)
pause:
	makes the dialog wait for user input
	pause
setFlag:
	~ not fully theorized
	sets the flag to the indicated state
	setFlag(flagName, state)
setSpeaker:
	sets ther face on the dialog box to the indicated mob;
	~ non-Mob objects might not have a face
	if object isn't found, the face is not visible
	boolean [focus] is optional. if included (regardless of value), 
		camera focus will be set to current speaker
	setSpeaker(objectName, [focus])

	known: partner, narrator, this
setScript:
	sets the read location for the object's script
	!!does not change the source file!!
	setScript(scriptTitle)
setChoice:
	creates a choice situation with the specified types of choices;
	minimum of 2 choices, maximum of 5 choices
	setChoice(type# 1:message, type# 2:message, ... type# 5:message)

	choice types: YesNo, 1(simple), 2(exciting), 3(curious), 4(cowardly), 5(power)
song/setSong:
	sets the current song to the song given;
	if no song gound with given parameters than song will not change
	setSong(song#/songTitle)

	Since songs indicicies might change througout development, it is better to use song titles
	see the music resource folder (/res/music/ for song names. Names must be EXACT)
spawn:
	spawns the object at the specified location
	spawn(objectType, x, y)

	x and y are in pixels
	refer to object type list for possible values
text:
	gives text to the dialog box; consecutive text commands provide multiple pages of text
	boolean [unpause] is optional. if included (regardless of value), the dialogbox won't automatically wait for user input.
	text(emotion, {text$}, [unpause])

	delimiters:
		/l - line
		~ /c - capitilize previous variable
		/player - player name
		/playerg - player gender
		/partner - partner name
		/partnerg - partner gender
		/home - player's house type
		~ /address - player's house address
value/changeValue:
	changes the identified value
	value(add/set, objectName, value, new value)
	value(add/set, value, new Value)

	known: playerHealth, playerMoney, playerBravery, playerNicety, relationship/love, health
wait:
	pauses analyzing for game for specified time
	~ accuracy in time not implemented
	wait(time#)

================================================
		Arguments
================================================
this: 
	refers to the owner of the script
objectName: 
	If NPC, then this refers to the name given. Otherwise this refers to the ID. 
	For example, a bird would have the ID bird1
	

	