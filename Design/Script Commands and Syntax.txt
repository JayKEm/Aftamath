Script Commands and Syntax

================================================
*************	Important Info    **************
================================================

The parser operates by reading each consecutive line at a time.
If you're using Notepad, make sure you have word wrapping turned off.
It may pause reading the script file with commands like "text" and "pause",
but it generally should not stop unless the command "done" is given.

EVERY code section of a script must be sectioned off into "sub scripts", or scripts within scripts.
Example: Brackets are NOT included 
	Script [enter some kind of name here]
	[script code]
	done
If you do not do this, the parser will not know where to start or end, so it will read everything on
file all at once. Look at my example scripts if you need help.

Typically, dialoges with an NPC begin by locking the player, forcing the NPC to face the player,
and setting the current speaker to that NPC. This can all be done like so:
	lockPlayer
	faceObject(this, player)
	setSpeaker(this)

Use # at the beginning of a line to denote text that is not code
If you want to use a string as an argument, generally the way you'd do this is by surrounding the 
string with braces

Feel free to organize if and choice blocks with spaces only.
Although, please refrain from using tab, as it creates a character that does not get trimmed and only
confuses the parser.

~: not fully implemented

Please keep in mind that this is a custom built scripting system. If you have any ideas feel
free to tell me about them, and we'll see about implementing them. 

Also, please report any bugs. The script parser is incredibly complicated - 1000 lines of code
can be a little difficult to read through. It would be better if you simply report instead of
trying to fix it yourself.

I've tried my best to add print statements to help you debug your script.

================================================
		Commands
================================================
	Format: description followed by syntax

action:
	makes the object do an action animation of their class; type of action depends on object
	action(objectName, action#/actionType)
addPartner:
	makes the given NPC be the player's partner
	addPartner(objectName)

	~multiple partners have not been implemented, and most likely will not be in the future.
	 This means that adding a partner will not work if the player already has a partner
~attack:
	makes a superMob attack an object once.
	should automatically handle moving the superMob back to its original position
	attack(objectName)
choice:
	provides handling for the indicated choice
	must be ended with "endOption" command
	[choiceName]
checkPoint:
	sets a point in the script to return to with "return()"
	NOTE: these are local, and are deleted when the script ends.
	      This also means you cannot jump between subscripts
	checkPoint(Name)
declare:
	use to declare counter variables to keep track of throughout the game
	declare(variableName, scope, type, initialValue)

	scopes: local, global
	types: Integer, Float, String
	NOTE: local variables delete themselves when the script ends (i.e. with the done command),
	      so keep that in mind when you want to declare variables
done:
	ends handling for the entire script
	resets the state of all NPCs
	lowers the dialog box
	focuses camera on player
	done
else:
	part of "if" and ~"elseIf" condition handling
	else
~elseIf:
	provides another condition following an "if" command.
	if no "if" command preceeds this command, this acts just like an "if"
	elseIF(flag + and/or + [comparison] +...)

	use "!" to denote a "not" statement
	use "." to obtain object properties
	comparisons would be things like [player.health > 7] or [!civilian1.gender = male]

	~capitalization does matter
endChoice:
	must follow all handling for the "setChoice" command
	endChoice
endIf:
	ends condition handling
	endIf
endGame:
	ends the entire game, without saving!
	Be careful when using this!
	endGame
endOption:
	ends handling for a choice
	handling skips to the index of the command "endChoice"
	endOption
~giveItem:
	gives the mob a specific item
	giveItem(objectName, itemType)
~hasItem:
	returns the amount of the given item the object has
	hasItem(objectName, itemType)
hideDialog:
	hides the dialog box from visibility
	~showing the dialog is automatic
	hideDialog
~hideStats:
	hides money, health, or, if the player is a super hero, power
	hideStats(statType1, statType3, statType3)
	~the power stat should hide automatically

	none of the stat types are mandatory.
	if none are given, all stats are hidden
if:
	compares values and flags. You can almost write this like you would in java...
	if(flag + and/or + [comparison] +...)

	use "!" to denote a "not" statement
	use "." to obtain object properties
	comparisons would be things like [player.health > 7] or [!civilian1.gender = male]

	capitalization does matter
	NOTE: nested ifs are buggy
face/faceObject:
	makes a mob face a specific object; does not affect non-Mob objects
	NPCs will have their state set to FACEOBJECT
	face(objectName, focus objectName)
forcefollow:
	toggles whether or not the player's partner is forced to follow the player
	if the player doesn't have a partner, this does nothing
	forcefollow(true/false)
follow:
	makes the mob object follow the target
	follow(objectName, focus objectName)
resetState:
	sets the NPC's state to its default state; does not affect non-NPC objects
	this happens automatically when the script ends
	resetState(objectName)
lockPlayer:
	prevents the player from being able to move by setting the PlayState type to LISTEN
	lockPlayer
lock:
	locks the mob
	lock(objectName)
moveCamera:
	moves the camera to the indicated location
	moveCamera(x, y)
focus/focusCamera:
	focuses the camera on the specified object
	focus(objectName)
unfocus/unfocusCamera/removeFocus:
	focuses the camera back on the player
	unfocus
~moveObject:
	moves the object to the specified location; units in pixels
	moveObject(objectName, x)
pause:
	makes the dialog wait for user input
	pause
~playSound:
	plays the given sound
	~location is optional; if given, the sound will play at the givent location
	playSound(soundName)
remove/removeObject:
	remove the given object from the world
	remove(objectName)
removePartner:
	makes the player no longer have a partner
	removePartner()
return:
	returns the script index to the given checkpoint
	does nothing if no checkpoint found
	return(name)
~setEvent:
	adds the event to the player's history
	setEvent(eventName)

	NOTE: if you add a new event, please add it to the list of events throughout the game
  	        so we can keep of all the events. Also tell me if it is a major event so it can show
		up in the history tab!!
setFlag:
	sets the flag to the indicated state
	setFlag(flagName, state)

	NOTE: if you add a new flag, please add it to the list of flags throughout the game
	      so we can keep of all the flags
setSpeaker:
	sets ther face on the dialog box to the indicated mob;
	~ non-Mob objects might not have a face
	if object isn't found, the face is not visible
	boolean [focus] is optional. if included (regardless of value), 
		camera focus will be set to current speaker
	setSpeaker(objectName, [focus])

	known: partner, narrator, this
setScript:
	sets the read location for the object's script
	!!does not change the source file!!
	If you want to change what something else says, create a flag and go to that
	setScript(scriptTitle)
~setChoice:
	creates a choice situation with the specified types of choices;
	minimum of 2 choices, maximum of 5 choices
	MUST be ended with an "endChoice" command
	setChoice(type# 1:message, type# 2:message, ... type# 5:message)

	choice types: YesNo, 1(simple), 2(exciting), 3(curious), 4(cowardly), 5(power), 
        ~6(abbreviation)

	NOTE: anything directly after a "setChoice" command will not be processed, unless it
		is a "choice" or "endChoice" command
~showStats:
	shows money, health, and, if the player is a super hero, power
	showStats(statType1, statType2, statType3)

	none of the stat types are mandatory
	if none are given, all are shown
song/setSong:
	sets the current song to the song given;
	if no song gound with given parameters than song will not change
	setSong(song#/songTitle)

	Since songs indicicies might change througout development, it is better to use song titles
	see the music resource folder (/res/music/ for song names. Names must be EXACT)
~spawn:
	spawns the object at the specified location
	spawn(objectType, x, y)

	x and y are in pixels
	refer to object type list for possible values
text:
	gives text to the dialog box; consecutive text commands provide multiple pages of text
	boolean [unpause] is optional. if included (regardless of value), the dialogbox won't automatically wait for user input.
	text(emotion, {text$}, [unpause])
value/changeValue:
	changes the identified value
	value(add/set, objectName.property, newValue)
	value(add/set, variable, newValue)
wait:
	pauses analyzing for game for specified time
	~ accuracy in time not implemented
	wait(time#)

================================================
		Arguments
================================================
this: 
	refers to the owner of the script
objectName: 
	If Mob, then this refers to the name given. Otherwise this refers to the ID. 
	For example, a sign would have the ID sign1
variable:
	used to denote a global variable
	names of these variables must be the exact same as when they were defined

	NOTE: since variables are defined between scripts, 
	      I will create a list of variables that you can refer to
object properties:
	Note: some properties are limited to certain object types.
	
	location - Entities
	name - Mobs
	health - Mobs
	gender - Mobs
	power/level - SuperMobs
	powerType - SuperMobs
	~money - Player *(possibly implement vendors?)
	love/relationship - Player 
	loveScale - Player 
	bravery - Player 
	braveryScale - Player 
	niceness - Player 
	nicenessScale - Player 
	house - Player 
	hasPartner - Player

text delimiters:
	/l - line
	~ /c - capitilize previous variable
	/player - player name
	/playerg - player gender
	/partner - partner name
	/partnerg - partner gender
	/home - player's house type
	/address - player's house address
	~ /variable[]

stat types:
	health
	money
	power/level (includes power type)
	
action Types:
	action # usually goes from 1 - 9, for now
		1 - walk
		2 - jump
XXXXXXXXXXXXXXXX3 - fall (doesn't actually make the object fall)
		4 - flinch
		5 - die
		6 - power
		7 - attack (doesn't actually make the object attack; use the "attack" command for that)
		8 - special1	\  depends on object type
		9 - special2    /
	~to be implemented: more action animations
	

	