Script Commands and Syntax

================================================
*************	Important Info    **************
================================================

The parser operates by reading each consecutive line at a time.
If you're using Notepad, make sure you have word wrapping turned off.
It may pause reading the script file with commands like "text" and "pause",
but it generally should not stop unless the command "done" is given.

EVERY code section of a script must be sectioned off into "sub scripts", or scripts within scripts.
Example: Brackets are NOT included 
	Script [enter some kind of name here]
	[script code]
	done
If you do not do this, the parser will not know where to start or end, so it will read everything on
file all at once. Look at my example scripts if you need help.

Typically, dialoges with an NPC begin by locking the player, forcing the NPC to face the player,
and setting the current speaker to that NPC. This can all be done like so:
	lockPlayer
	facePlayer(this)
	setSpeaker(this)

Use # at the beginning of a line to denote text that is not code
If you want to use a string as an argument, generally the way you'd do this is by surrounding the 
string with braces

Feel free to organize if and choice blocks with spaces only.
Although, please refrain from using tab, as it creates a character that does not get trimmed and 
only confuses the parser (as of now)

~: not fully implemented

Please keep in mind that this is a custom built scripting system. If you have any ideas feel
free to tell me about them, and we'll see about implementing them. 

Also, please report any bugs. The script parser is incredibly complicated - 2000 lines of code
can be a little difficult to sort through. It would be better if you simply report instead of
trying to fix it yourself.

I've tried my best to add print statements to help you debug your script.


================================================
		Command List
================================================

	  addPartner
	~ attack
	  checkPoint
	  choice
	  declare
	~ doAction
	  done
	  else
	~ elseIf
	  end
	  endGame
	  eventMusic
	  fanfare
	~ giveItem
	~ hasItem
	  hideDialog
	~ hideStats
	  if
	  inputText
	  face/faceObject
	  forcefollow
	  follow
	  resetState
	  lockPlayer
       X~ lock
	  moveCamera
	  focus/focusCamera
	  unfocus/unfocusCamera/removeFocus
	~ move
	~ pause
	~ playSound
	  remove/removeObject
	  removePartner
	  return
	  say
	  setAttackType
	  setChoice
	  setDefaultState
	  setEvent
	  setFlag
	  setResponse
	~ setScene
	  setSpeaker
	  setScript
	~ setState
	  setVulnerability
	~ showStats
	~ spawn
	  statUpdate
	  text
       X~ unlock
	  value/changeValue
	  wait

================================================
		Command Syntax
================================================
	Format: description followed by syntax
	[]: optional argument

addPartner:
	makes the given NPC be the player's partner
	addPartner(objectName)

	~multiple partners have not been implemented, and most likely will not be in the future.
	 This means that adding a partner will not work if the player already has a partner
~attack:
	makes a mob attack an object once with a power type move
	if the mob has no innate power, the result is a punch
	if the mob is the player and the player has no innate power, the result is a random power type.
		as this funtion is called more on the player, the most common power type becomes the player's type
	~should automatically handle moving the mob back to its original position if movement is
		necessary
	attack(objectName, [targetObject])
checkPoint:
	sets a point in the script to return to with "return()"
	NOTE: these are local, and are deleted when the script ends.
	      This also means you cannot jump between subscripts
	checkPoint(Name)
choice:
	provides handling for the indicated choice
	must be ended with "end" command
	[choice choiceName]
declare:
	use to declare counter variables to keep track of throughout the game
	declare(variableName, scope, type, initialValue)

	scopes: local, global
	types: Integer, Float, String, Flag
	NOTE: local variables delete themselves when the script ends (i.e. with the done command),
	      so keep that in mind when you want to declare variables
doAction:
	makes the object do a temporary action animation
	if the boolean [wait] is included and is false, then the parser will not wait until the mob to finish 
		the action. By default, the script waits for the action to be completed
	doAction(objectName, actionType, [wait])
	doAction(objectName, actionType, target, [wait])
	doAction(objectName, actionType, time, [wait])
	doAction(objectName, actionType, target, time, [wait])
	doAction(objectName, actionType, target, resetType, [wait])

	see action type list
done:
	ends handling for the entire script
	resets the state of some NPCs
	lowers the dialog box
	focuses camera on player
	done
else:
	part of "if" and ~"elseIf" condition handling
	else
end:
	halts handling for certain commands
	basically the same as and end brace } in programming
	MUST follow: setChoice, choice options, if, elseIf
endGame:
	ends the entire game, without saving!
	Be careful when using this!
	endGame
	~endGame({message})
eventMusic:
	sets the current song to the song given;
	if no song found with given parameters than song will not change
	eventMusic(songTitle)

	see the music resource folder (Aftamath/res/music/) for song names. 
	Names must be EXACT
fanfare:
	plays a fanfare with given title

~giveItem:
	gives the mob a specific item
	if the object is not a mob, this does nothing
	giveItem(objectName, itemType)
~hasItem:
	returns the amount of the given item the mob has
	if the object is not a mob, this does nothing
	hasItem(objectName, itemType)
hideDialog:
	hides the dialog box from visibility
	~showing the dialog is automatic
	hideDialog
~hideStats:
	hides money, health, or, if the player is a super hero/villain, power
	hideStats(statType1, statType3, statType3)
	~the power stat should hide automatically

	none of the stat types are mandatory.
	if none are given, all stats are hidden
if:
	compares values and flags. You can almost write this like you would in java...
	if(flag + and/or + [comparison] +...)

	use "!" to denote a "not" statement
	use "." to obtain object properties
	comparisons would be things like [player.health > 7] or [!civilian1.gender = male]

	capitalization does matter
	NOTE: nested ifs are buggy
input:
	used to get user input to save things like names
	input(variableName)

	NOTE: use this sparingly!
face/faceObject:
	makes a mob face a specific object; does not affect non-Mob objects
	if no targetName is given, the object faces the opposite direction
	NPCs will have their state set to FACEOBJECT
	face(objectName, targetName)
forcefollow:
	toggles whether or not the player's partner is forced to follow the player
	if the player doesn't have a partner, this does nothing
	~if the partner is not in the current scene, this does nothing
	forcefollow(true/false)
follow:
	makes the mob object follow the target
	follow(objectName, focus objectName)
resetState:
	sets the NPC's state to its default state; does not affect non-NPC objects
	this happens automatically when the script ends
	resetState(objectName)
lockPlayer:
	prevents the player from being able to move by setting the PlayState type to LISTEN
	lockPlayer
~lock:
	locks the mob
	lock(objectName)
moveCamera:
	moves the camera to the indicated location
	moveCamera(x, y)
focus/focusCamera:
	focuses the camera on the specified object
	focus(objectName)
unfocus/unfocusCamera/removeFocus:
	focuses the camera back on the player
	unfocus
~move/moveObject:
	moves the mob to the specified location; units in tiles
	if the boolean [run] is included, the mob will run to the location
	if object is not a mob, this does nothing
	moveObject(objectName, x, y, [run]) //accepts Tile Location
	moveObject(objectName, pathName, [run]) //accepts a path
	moveObject(objectName, targetName, [run]) //accepts a mob

	To get the Tile Location (x, y) and pathName, you have to use Tiled.
~pause:
	makes the dialogue wait for user input
	pause
~playSound:
	plays the given sound
	~location is optional; if given, the sound will play at the given location. 
	~It can either be an object or it can be separated into x, y.
	playSound(soundName, [location])
remove/removeObject:
	remove the given object from the world
	remove(objectName)
removePartner:
	makes the player no longer have a partner
	removePartner()
return:
	returns the script index to the given checkpoint
	does nothing if no checkpoint found
	return(checkpointName)
say:   
	displays a textbox above the given object. if no object is given, the default is the 
	owner of the script
	similar to "text"

	if the boolean [!wait] is included, then the script will NOT wait for user input before moving on
		if the value is true
	by default, the textbox will stay only as long as the player can read it (it is porportional to
		amount of text)
	if 'objectName' is not included or if the object is not found, the default object is the player
	say({text}, [!wait])
	say(objectName, {text}, [!wait])
setAttackType:
	changes what the NPC does when attacked
	if the object is not an NPC, nothing happens
	if the given type is not valid, the attack type is set to "never" by default
	setAttackType(objectName, attackType)

	see attack type list
setChoice:
	creates a choice situation with the specified types of choices;
	minimum of 2 choices, maximum of 5 choices
	MUST be ended with an "endChoice" command
	setChoice(type# 1:message, type# 2:message, ... type# 5:message)

	NOTE: anything directly after a "setChoice" command will not be processed, unless it
		is a "choice" or "endChoice" command
setDefaultState:
	sets the default AI state of the NPC. WARNING! This has a permanent effect! If the AI 
		is only temporary, be sure to use "setState" instead!
	if the object is not an NPC, this does nothing	
	setDefaultState(objectName, stateType)

	see list of AI states
	invalid state type(s):
		attacking
setDialogue:
	changes the dialogue script for the given mob. Usually use this after spawning a mob in
	setDialogue(objectName, scriptName)	
~setEvent:
	adds the event to the player's history
	the description should be modified during the event. For example, if one event has multiple
	 outcomes, the script should include a string variable that describes what the player actually
	 did
	setEvent(eventName, description)

	NOTE: if you add a new event, please add it to the list of events throughout the game
  	        so we can keep of all the events. Also tell me if it is a major event so it can show
		up in the history tab!!
setFlag:
	sets the flag to the indicated state
	setFlag(flagName, state)

	NOTE: if you add a new flag, please add it to the list of flags throughout the game
	      so we can keep of all the flags
setResponse:
	changes what the given NPC does when it sees the player.
	does nothing if the object is not an NPC
	if the given type is not valid, the  the responseType is set to "ignore" by default
	setResponse(objectName, responseType)
	
	see responseTypes list
~setScene:
	change the current location to the given scene
	setScene(sceneName)

	see list of levels
setSpeaker:
	sets ther face on the dialog box to the indicated mob;
	~ non-Mob objects might not have a face
	if object isn't found, the face is not visible
	boolean [focus] is optional. if included (regardless of value), 
		camera focus will be set to current speaker
	setSpeaker(objectName, [focus])
setScript:
	sets the read location for the object's script
	!!does not change the source file!!
	If you want to change what something else says, use setDialogue
	setScript(scriptTitle)
~setState:
	sets the NPC's current AI state to the given state. The NPC reverts to its default state
		when the script finishes. If a permanent change to AI is necessary, use
		"setDefaultState"
	if the object is not an NPC, nothing happens
	setState(objectName, stateType)

	see AI state list
setVul:
setVulnerability:
	set the vulnerability of the given mob. Value must be boolean
	setVulnerability(objectName, value)
~showStats:
	shows money, health, and, if the player is a super hero, power
	showStats(statType1, statType2, statType3)

	none of the stat types are mandatory
	if none are given, all are shown
~spawn:
	spawns the object at the specified location
	spawn(objectType, NPCtype, name, x, y, layer) //for spawning NPCs

	NPCtype must be a valid image base name, like "boss1" or "bballer". For full list of current 
		available images see "Aftamath/assets/images/entities/mobs"
	layer must either be 1 or 3
	objectType must be either NPC or other valid types (there aren't any as of now)
	location (x, y) is a Tiled Vector.
	refer to object type list for possible values
statUpdate:
	adds nicetyVal and braveryVal player's current stats to the given values. 
	nicetyScale and braveryScale are modified values. These values affect the rate at 
	which the Vals are added and take effect immediately.

	this in effect can also be achieved by using value/changeValue	

	statUpdate(nicetyVal, braveryVal, [nicetyScale, braveryScale])

	nicetyVal and braveryVal must be an integer between -3 and 3
	if included, nicetyScale and braveryScale must be a number between 0 and 2, including
		floating point values
	both nicetyScale and braveryScale must be included if included at all
text:
	gives text to the dialog box; 
	consecutive text commands provide multiple pages of text

	boolean [unpause] is optional. if included (regardless of value), the dialogbox won't 
	automatically wait for user input.

	text(emotion, {text$}, [unpause])

	NOTE: You can create a short pause by entering a "~" in the text. This pause is longer
	      than the automatic pause casued by punctuation.
~unlock:
	unlocks the given mob
	unlock(objectName)
value/changeValue:
	changes the identified value
	value(add/set, objectName.property, newValue)
	value(add/set, variable, newValue)
wait:
	pauses analyzing for game for specified time
	wait(seconds)

================================================
		Arguments
================================================
this: 
	refers to the owner of the script
objectName: 
	If Mob, then this refers to the name given. Otherwise this refers to the ID. 
	For example, a sign would have the ID sign1
variable:
	used to denote a global variable
	names of these variables must be the exact same as when they were defined

	NOTE: since variables are defined between scripts, 
	      I will create a list of variables that you can refer to
object properties:
	Note: some properties are limited to certain object types.
	
	location - Entities
	name - Mobs
	health - Mobs
	gender - Mobs
	power/level - SuperMobs
	powerType - SuperMobs
	~money - Player *(possibly implement vendors?)
	love/relationship - Player 
	loveScale - Player 
	*bravery - Player 
	*braveryScale - Player 
	*niceness - Player 
	*nicenessScale - Player 
	house - Player 
	hasPartner - Player

	*use "updateStats" if you want to modify these values

text delimiters:
	/l - line
	~ /c - capitilize previous word/variable
	~ /cc - fully capitilize previous word/variable
	/player - player name
	/playerg - player gender (guy, girl)
	/playergpp - player gender, passive (him, her)
	/playergps - player gender, possessive singular (his, her)
	/playergp - player gender, possessive plural (his, hers)
	/playergo - player gender, objective (he, she)
	/partner - partner name
	/partnerg - partner gender
	/partnergpp - parner gender, passive (his, her)
	/partnergps - parner gender, possessive singular (his, her)
	/partnergp - parner gender, possessive plural (his, hers)
	/partnergo - partner gender, objective (he, she)
	/partnert - partner title (boyfriend, girlfriend, wife, husband, sidekick, friend)
	/home - player's house type
	/address - player's house address
	/variable[]

emotions:
	normal
	happy
	sad
	mad
	flirty

stat types:
	health
	money
	power/level (includes power type)

choice types: 
	YesNo, 
	1(simple)	...
	2(exciting)	!
	3(curious)	?
	4(cowardly)	<-
	5(power) 	*
       	6(abbreviation)
	
action Types:

	  STATIONARY - look around idlely in one location
	  IDLEWALK - walk around a general area
	X~IDLEFLY - fly around a general vicinity 
	  EVADING_ALL - evade all objects on sight
	  DANCING - dance stationary
	  BLOCKPATH  - collide w/ player to prevent passage
	  JUMP - jump
	  DUCK - duck
	X~FLY
	  FACERIGHT - face right
	  FACELEFT - face left
	  FLAIL - no description needed
	  IDLE - do idle animation
	  AIM - aim at an object
	  LOSEAIM - stop aiming at an object
	  PATH - walk along a path
	X~FLYPATH - fly along a path
	  PUNCH -do punch animation
	  HUG - hug an object (and make it hug back)
	  KISS - kiss an object
	  SNOOZE - do snoozing animation
	  special1    \  
	  special2    -	depends on object type
	  special3    /
	  STOP

	X~fighting - fight to death
	X~timedFight - fight until health below certain value or time expires
AI reset types:
	ON_ANIM_END
	ON_SCRIPT_END
	ON_AI_COMPLETE
	ON_LEVEL_CHANGE
	NEVER

NPC responseTypes:
	follow
	attack
	evade
	talk
	ignore
	
NPC attackTypes:
	on_sight - if the character is seen
	on_attacked - if the NPC is attacked, fight back
	on_defend - if the NPC is attacked, generally only attack once
	~random - attack randomly
	never
	
	

	